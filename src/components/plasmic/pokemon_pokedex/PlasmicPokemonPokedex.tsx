// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1wAs75gBV57ZrMrLG7q32
// Component: qhC_BX7dta8V

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: BEvG0BIpe1Q0/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { RichList } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-list";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1wAs75gBV57ZrMrLG7q32/projectcss
import sty from "./PlasmicPokemonPokedex.module.css"; // plasmic-import: qhC_BX7dta8V/css

createPlasmicElementProxy;

export type PlasmicPokemonPokedex__VariantMembers = {};
export type PlasmicPokemonPokedex__VariantsArgs = {};
type VariantPropType = keyof PlasmicPokemonPokedex__VariantsArgs;
export const PlasmicPokemonPokedex__VariantProps = new Array<VariantPropType>();

export type PlasmicPokemonPokedex__ArgsType = {};
type ArgPropType = keyof PlasmicPokemonPokedex__ArgsType;
export const PlasmicPokemonPokedex__ArgProps = new Array<ArgPropType>();

export type PlasmicPokemonPokedex__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  dataList?: Flex__<typeof RichList>;
  addPokemonModal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  editPokemonModal?: Flex__<typeof AntdModal>;
  updateEntry?: Flex__<typeof FormWrapper>;
};

export interface DefaultPokemonPokedexProps {
  className?: string;
}

const $$ = {};

function PlasmicPokemonPokedex__RenderFunc(props: {
  variants: PlasmicPokemonPokedex__VariantsArgs;
  args: PlasmicPokemonPokedex__ArgsType;
  overrides: PlasmicPokemonPokedex__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "addPokemonModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "editPokemonModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectedPokemonId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "updateEntry.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "updateEntry",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "updateEntry.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "updateEntry",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getPokemon: usePlasmicDataOp(() => {
      return {
        sourceId: "nDCgSv4zZmrTHuTQMt8aGR",
        opId: "b1e2acb6-b4ba-45c1-99f9-1fc6b13d6289",
        userArgs: {},
        cacheKey: `plasmic.$.b1e2acb6-b4ba-45c1-99f9-1fc6b13d6289.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k9Hi7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ebYzZ
                        )}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          {"Pokemon Pokedex"}
                        </h1>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pM9Cq
                        )}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__wAv8T
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateAddPokemonOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["addPokemonModal", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateAddPokemonOpen"] != null &&
                              typeof $steps["updateAddPokemonOpen"] ===
                                "object" &&
                              typeof $steps["updateAddPokemonOpen"].then ===
                                "function"
                            ) {
                              $steps["updateAddPokemonOpen"] = await $steps[
                                "updateAddPokemonOpen"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__clTwQ
                            )}
                          >
                            {"+ New pokemon"}
                          </div>
                        </AntdButton>
                      </Stack__>
                    </div>
                  </section>
                  <RichList
                    data-plasmic-name={"dataList"}
                    data-plasmic-override={overrides.dataList}
                    bordered={true}
                    className={classNames("__wab_instance", sty.dataList)}
                    content={[
                      {
                        key: "description",
                        fieldId: "description",
                        role: "content"
                      }
                    ]}
                    data={(() => {
                      try {
                        return $queries.getPokemon;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    pageSize={12}
                    rowActions={(() => {
                      const __composite = [
                        { type: null, label: null, onClick: null },
                        { type: null, label: null, onClick: null }
                      ];
                      __composite["0"]["type"] = "item";
                      __composite["0"]["label"] = "Edit";
                      __composite["0"]["onClick"] = async (rowKey, row) => {
                        const $steps = {};

                        $steps["updateSelectPokemonId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedPokemonId"]
                                },
                                operation: 0,
                                value: row.id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectPokemonId"] != null &&
                          typeof $steps["updateSelectPokemonId"] === "object" &&
                          typeof $steps["updateSelectPokemonId"].then ===
                            "function"
                        ) {
                          $steps["updateSelectPokemonId"] = await $steps[
                            "updateSelectPokemonId"
                          ];
                        }

                        $steps["updateUpdatePokemonOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editPokemonModal", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUpdatePokemonOpen"] != null &&
                          typeof $steps["updateUpdatePokemonOpen"] ===
                            "object" &&
                          typeof $steps["updateUpdatePokemonOpen"].then ===
                            "function"
                        ) {
                          $steps["updateUpdatePokemonOpen"] = await $steps[
                            "updateUpdatePokemonOpen"
                          ];
                        }
                      };
                      __composite["1"]["type"] = "item";
                      __composite["1"]["label"] = "Delete";
                      __composite["1"]["onClick"] = async (rowKey, row) => {
                        const $steps = {};

                        $steps["updateSelectPokemonId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedPokemonId"]
                                },
                                operation: 0,
                                value: row.id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectPokemonId"] != null &&
                          typeof $steps["updateSelectPokemonId"] === "object" &&
                          typeof $steps["updateSelectPokemonId"].then ===
                            "function"
                        ) {
                          $steps["updateSelectPokemonId"] = await $steps[
                            "updateSelectPokemonId"
                          ];
                        }

                        $steps["useIntegration"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "nDCgSv4zZmrTHuTQMt8aGR",
                                  opId: "81b52687-420c-4c99-9562-b0c4279d7873",
                                  userArgs: {
                                    conditions: [$state.selectedPokemonId]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["useIntegration"] != null &&
                          typeof $steps["useIntegration"] === "object" &&
                          typeof $steps["useIntegration"].then === "function"
                        ) {
                          $steps["useIntegration"] = await $steps[
                            "useIntegration"
                          ];
                        }
                      };
                      return __composite;
                    })()}
                    type={"grid"}
                  />

                  <AntdButton
                    className={classNames("__wab_instance", sty.button___6Kayn)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tPso
                      )}
                    >
                      {"next"}
                    </div>
                  </AntdButton>
                  <AntdModal
                    data-plasmic-name={"addPokemonModal"}
                    data-plasmic-override={overrides.addPokemonModal}
                    className={classNames(
                      "__wab_instance",
                      sty.addPokemonModal
                    )}
                    closeIcon={null}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tAkCb
                        )}
                      >
                        {""}
                      </div>
                    }
                    modalContentClassName={classNames({
                      [sty["pcls_uiQ6qCqUtx36"]]: true
                    })}
                    modalScopeClassName={sty["addPokemonModal__modal"]}
                    okText={"Add pokemon"}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "addPokemonModal",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "addPokemonModal",
                      "open"
                    ])}
                    title={"Add Pokemon"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__w1Jl2)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form),
                          data: {
                            sourceId: "nDCgSv4zZmrTHuTQMt8aGR",
                            opId: "bb64b7b0-b695-4f90-90a5-c5d986e0cbde",
                            userArgs: {},
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getSchema";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.LJfmATZqAyrB.$.bb64b7b0-b695-4f90-90a5-c5d986e0cbde.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id", hidden: null },
                              {
                                key: "name",
                                fieldId: "name",
                                label: null,
                                rules: null
                              },
                              {
                                key: "description",
                                fieldId: "description",
                                label: null
                              },
                              {
                                key: "imageUrl",
                                fieldId: "imageUrl",
                                label: null
                              },
                              {
                                key: "inserted_at",
                                fieldId: "inserted_at",
                                hidden: null
                              }
                            ];
                            __composite["0"]["hidden"] = true;
                            __composite["1"]["label"] = "Name";
                            __composite["1"]["rules"] = [
                              { ruleType: "required" }
                            ];

                            __composite["2"]["label"] = "Description";
                            __composite["3"]["label"] = "Image URL";
                            __composite["4"]["hidden"] = true;
                            return __composite;
                          })(),

                          extendedOnValuesChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form", "value"],
                              FormWrapper_Helpers
                            ),
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "nDCgSv4zZmrTHuTQMt8aGR",
                                      opId: "ad1dc4ad-87a2-4c3d-894f-3db7f04dd759",
                                      userArgs: {
                                        variables: [$state.form.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }
                          },
                          onIsSubmittingChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form", "isSubmitting"],
                              FormWrapper_Helpers
                            ),
                          ref: ref => {
                            $refs["form"] = ref;
                          },
                          requiredMark: true,
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button___0PNf
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hw9Jj
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form"}
                            data-plasmic-override={overrides.form}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </AntdModal>
                  <AntdModal
                    data-plasmic-name={"editPokemonModal"}
                    data-plasmic-override={overrides.editPokemonModal}
                    className={classNames(
                      "__wab_instance",
                      sty.editPokemonModal
                    )}
                    closeButtonClassName={classNames({
                      [sty["pcls_z9K92hNY5f1O"]]: true
                    })}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    modalContentClassName={classNames({
                      [sty["pcls_Q6oF73LeMFhl"]]: true
                    })}
                    modalScopeClassName={sty["editPokemonModal__modal"]}
                    onCancel={async () => {
                      const $steps = {};

                      $steps["updateAddPokemonModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["addPokemonModal", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateAddPokemonModalOpen"] != null &&
                        typeof $steps["updateAddPokemonModalOpen"] ===
                          "object" &&
                        typeof $steps["updateAddPokemonModalOpen"].then ===
                          "function"
                      ) {
                        $steps["updateAddPokemonModalOpen"] = await $steps[
                          "updateAddPokemonModalOpen"
                        ];
                      }
                    }}
                    onOk={async () => {
                      const $steps = {};

                      $steps["postgresUpdateMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "nDCgSv4zZmrTHuTQMt8aGR",
                                opId: "1f84acbe-beff-4b58-9ec0-695f37c99561",
                                userArgs: {
                                  keys: [$state.selectedPokemonId],
                                  variables: [$state.updateEntry.value]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateMany"] != null &&
                        typeof $steps["postgresUpdateMany"] === "object" &&
                        typeof $steps["postgresUpdateMany"].then === "function"
                      ) {
                        $steps["postgresUpdateMany"] = await $steps[
                          "postgresUpdateMany"
                        ];
                      }
                    }}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "editPokemonModal",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "editPokemonModal",
                      "open"
                    ])}
                    title={"Update pokemon"}
                    wrapClassName={classNames({
                      [sty["pcls_92cv6A4jOOmg"]]: true
                    })}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__y7Y3N)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.updateEntry
                          ),
                          data: {
                            sourceId: "nDCgSv4zZmrTHuTQMt8aGR",
                            opId: "a218021e-4ded-4679-966f-b1d69d7a452f",
                            userArgs: {
                              filters: [$state.selectedPokemonId]
                            },
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getOne";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.eRt4sb3VzBKF.$.a218021e-4ded-4679-966f-b1d69d7a452f.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id", hidden: null },
                              { key: "name", fieldId: "name", label: null },
                              {
                                key: "description",
                                fieldId: "description",
                                label: null
                              },
                              {
                                key: "imageUrl",
                                fieldId: "imageUrl",
                                label: null
                              },
                              {
                                key: "inserted_at",
                                fieldId: "inserted_at",
                                hidden: null
                              }
                            ];
                            __composite["0"]["hidden"] = true;
                            __composite["1"]["label"] = "Name";
                            __composite["2"]["label"] = "Description";
                            __composite["3"]["label"] = "Image URL";
                            __composite["4"]["hidden"] = true;
                            return __composite;
                          })(),

                          extendedOnValuesChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["updateEntry", "value"],
                              FormWrapper_Helpers
                            ),
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onIsSubmittingChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["updateEntry", "isSubmitting"],
                              FormWrapper_Helpers
                            ),
                          ref: ref => {
                            $refs["updateEntry"] = ref;
                          },
                          submitSlot: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lO8Z
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "updateEntry.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "updateEntry.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"updateEntry"}
                            data-plasmic-override={overrides.updateEntry}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </AntdModal>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "dataList",
    "addPokemonModal",
    "form",
    "editPokemonModal",
    "updateEntry"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "dataList",
    "addPokemonModal",
    "form",
    "editPokemonModal",
    "updateEntry"
  ],
  section: ["section", "h1"],
  h1: ["h1"],
  dataList: ["dataList"],
  addPokemonModal: ["addPokemonModal", "form"],
  form: ["form"],
  editPokemonModal: ["editPokemonModal", "updateEntry"],
  updateEntry: ["updateEntry"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h1: "h1";
  dataList: typeof RichList;
  addPokemonModal: typeof AntdModal;
  form: typeof FormWrapper;
  editPokemonModal: typeof AntdModal;
  updateEntry: typeof FormWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPokemonPokedex__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPokemonPokedex__VariantsArgs;
    args?: PlasmicPokemonPokedex__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPokemonPokedex__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPokemonPokedex__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPokemonPokedex__ArgProps,
          internalVariantPropNames: PlasmicPokemonPokedex__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPokemonPokedex__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPokemonPokedex";
  } else {
    func.displayName = `PlasmicPokemonPokedex.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "d1wAs75gBV57ZrMrLG7q32"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPokemonPokedex = Object.assign(
  // Top-level PlasmicPokemonPokedex renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    dataList: makeNodeComponent("dataList"),
    addPokemonModal: makeNodeComponent("addPokemonModal"),
    form: makeNodeComponent("form"),
    editPokemonModal: makeNodeComponent("editPokemonModal"),
    updateEntry: makeNodeComponent("updateEntry"),

    // Metadata about props expected for PlasmicPokemonPokedex
    internalVariantProps: PlasmicPokemonPokedex__VariantProps,
    internalArgProps: PlasmicPokemonPokedex__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Pokemon Pokedex",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPokemonPokedex;
/* prettier-ignore-end */
